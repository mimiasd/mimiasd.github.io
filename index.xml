<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mimiasd&#39;s experience</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Mimiasd&#39;s experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 22 Mar 2018 16:57:49 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Semver</title>
      <link>http://localhost:1313/post/semver/</link>
      <pubDate>Thu, 22 Mar 2018 16:57:49 +0800</pubDate>
      
      <guid>http://localhost:1313/post/semver/</guid>
      <description>Semantic Versioning 2.0.0 　Given a version number MAJOR.MINOR.PATCH, increment the:
 MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards-compatible manner, and PATCH version when you make backwards-compatible bug fixes.  　Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.</description>
    </item>
    
    <item>
      <title>Computer Architecture</title>
      <link>http://localhost:1313/post/computer-architecture/</link>
      <pubDate>Fri, 16 Mar 2018 17:54:38 +0800</pubDate>
      
      <guid>http://localhost:1313/post/computer-architecture/</guid>
      <description> Computer number format  Bit
 Nibble
 Byte
 Bitstream
 Data type
  Character encoding  ASCII
 Unicode
 UTF-8
 UTF-16
 UTF-32
 ascii_unicode_and_utf-8
 unicode
  assembly language </description>
    </item>
    
    <item>
      <title>Go Commands</title>
      <link>http://localhost:1313/post/go-commands/</link>
      <pubDate>Wed, 14 Mar 2018 15:46:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go-commands/</guid>
      <description>go build 通过依赖和导入路径的名字来构建编译包，但不会安装结果。 如果构建的参数是一系列的 .go 文件，那么 build 是把它们当做单个包的源文件。 当编译一个单独的</description>
    </item>
    
    <item>
      <title>Golang Learning</title>
      <link>http://localhost:1313/post/golang-learn/</link>
      <pubDate>Tue, 13 Mar 2018 17:56:13 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-learn/</guid>
      <description>Foundational Golang  A Tour of Go
 How to Write Go Code
 The Go Programming Language Specification
 Effective Go
  Golang Tools  Go Tools  Golang Dianostics  Diagnostics
 delve
 gdb
  Golang FAQ  Frequently Asked Questions (FAQ)  Golang Wiki  Wiki  Golang Books  Learning go  Advanced Golang Go&amp;rsquo;s Assembler A Quick Guide to Go&amp;rsquo;s Assembler  GOOS=linux GOARCH=amd64 go tool compile -S x.</description>
    </item>
    
    <item>
      <title>Jws</title>
      <link>http://localhost:1313/post/jws/</link>
      <pubDate>Sun, 11 Mar 2018 13:40:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/jws/</guid>
      <description>JWS RFC JWS JWS 表示被数字签名或信息识别码保证的使用基于 JSON 数据结构的内容。该说明书用的加密算法定义在 JWA(JSON Web Algorithms) 中。相对应的加密功能定义在 &amp;ldquo;JWE&amp;rdquo; 中。 1. 简介 JWS 表</description>
    </item>
    
    <item>
      <title>Jwt</title>
      <link>http://localhost:1313/post/jwt/</link>
      <pubDate>Fri, 09 Mar 2018 18:00:33 +0800</pubDate>
      
      <guid>http://localhost:1313/post/jwt/</guid>
      <description>JWT RFC JWT JSON Web Token(JWT) 是一个紧凑的，URL 安全的代表在两部分传输要求描述。JWT 中的要求被编码到一个 JSON 对象中，被用作一个 JSON 网络签名(JWS)的负载，或</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://localhost:1313/post/docker/</link>
      <pubDate>Thu, 08 Mar 2018 10:18:37 +0800</pubDate>
      
      <guid>http://localhost:1313/post/docker/</guid>
      <description>docker 入门 阮一峰 Docker 入门教程 Docker Cheat Sheet 安装和配置 docker 安装 docker 配置 docker Container Technologies LXC - Linux Containers LMCTFY - Google Containers systemd freedesktop-systemd archlinux-systemd gentoo-systemd</description>
    </item>
    
    <item>
      <title>Private Vim</title>
      <link>http://localhost:1313/post/private-vim/</link>
      <pubDate>Sun, 04 Mar 2018 20:29:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/private-vim/</guid>
      <description>概述 这是我个人的 vim 配置过程。 对于 vimscript，可以参考使用脚本编写 Vim 编辑器和 Vimscript 编程指南。 安装的各类插件 Vundle 首先安装 vim 插件管理器 Vundl</description>
    </item>
    
    <item>
      <title>Space Vim</title>
      <link>http://localhost:1313/post/space-vim/</link>
      <pubDate>Sun, 04 Mar 2018 18:06:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/space-vim/</guid>
      <description>这篇文章主要介绍space-vim的安装 vim 安装 对于 vim 的安装，我一般选择源码安装在/usr/local/目录下 安装依赖包 vim 安装时可能依赖于以下</description>
    </item>
    
    <item>
      <title>VimOremacs</title>
      <link>http://localhost:1313/post/vimoremacs/</link>
      <pubDate>Sun, 04 Mar 2018 16:43:42 +0800</pubDate>
      
      <guid>http://localhost:1313/post/vimoremacs/</guid>
      <description>vim or emacs 最近一直在纠结自己的 vim 配置使用起来有很多不足，想换成 emacs。 开始带着很大的热情学习@zilongshanren的Spacemacs</description>
    </item>
    
    <item>
      <title>Auth2.0</title>
      <link>http://localhost:1313/post/auth2/</link>
      <pubDate>Wed, 28 Feb 2018 17:59:26 +0800</pubDate>
      
      <guid>http://localhost:1313/post/auth2/</guid>
      <description>OAuth2.0 RFC 1. 简介 传统客户端-服务端认证模型中，是客户端用资源拥有者的证书去访问受限资源。而当资源拥有者把证书给第三方应用时，会出现以下问题和限制：</description>
    </item>
    
    <item>
      <title>Grammar Club</title>
      <link>http://localhost:1313/post/grammar-club/</link>
      <pubDate>Wed, 28 Feb 2018 11:11:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/grammar-club/</guid>
      <description>概述 读《语法俱乐部》的一些简单笔记。 第一章 基本句型及补语 五种简单基本句型 基本概念 S：Subject - 主语，说话或文章句子的主题字词，是句子的</description>
    </item>
    
  </channel>
</rss>